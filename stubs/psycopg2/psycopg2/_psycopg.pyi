from typing import Any, ClassVar

import psycopg2
import psycopg2.extensions
BINARY: type
BINARYARRAY: type
BOOLEAN: type
BOOLEANARRAY: type
BYTES: type
BYTESARRAY: type
CIDRARRAY: type
DATE: type
DATEARRAY: type
DATETIME: type
DATETIMEARRAY: type
DATETIMETZ: type
DATETIMETZARRAY: type
DECIMAL: type
DECIMALARRAY: type
FLOAT: type
FLOATARRAY: type
INETARRAY: type
INTEGER: type
INTEGERARRAY: type
INTERVAL: type
INTERVALARRAY: type
LONGINTEGER: type
LONGINTEGERARRAY: type
MACADDRARRAY: type
NUMBER: type
PYDATE: type
PYDATEARRAY: type
PYDATETIME: type
PYDATETIMEARRAY: type
PYDATETIMETZ: type
PYDATETIMETZARRAY: type
PYINTERVAL: type
PYINTERVALARRAY: type
PYTIME: type
PYTIMEARRAY: type
REPLICATION_LOGICAL: int
REPLICATION_PHYSICAL: int
ROWID: type
ROWIDARRAY: type
STRING: type
STRINGARRAY: type
TIME: type
TIMEARRAY: type
UNICODE: type
UNICODEARRAY: type
UNKNOWN: type
adapters: dict
apilevel: str
binary_types: dict
encodings: dict
paramstyle: str
sqlstate_errors: dict
string_types: dict
threadsafety: int

__libpq_version__: int

class AsIs:
    adapted: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getquoted(self, *args, **kwargs) -> Any: ...
    def __conform__(self, *args, **kwargs) -> Any: ...

class Binary:
    adapted: ClassVar[Any] = ...
    buffer: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getquoted(self, *args, **kwargs) -> Any: ...
    def prepare(conn): ...
    def __conform__(self, *args, **kwargs) -> Any: ...

class Boolean:
    adapted: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getquoted(self, *args, **kwargs) -> Any: ...
    def __conform__(self, *args, **kwargs) -> Any: ...

class Column:
    display_size: ClassVar[Any] = ...
    internal_size: ClassVar[Any] = ...
    name: ClassVar[Any] = ...
    null_ok: ClassVar[Any] = ...
    precision: ClassVar[Any] = ...
    scale: ClassVar[Any] = ...
    table_column: ClassVar[Any] = ...
    table_oid: ClassVar[Any] = ...
    type_code: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ConnectionInfo:
    backend_pid: ClassVar[Any] = ...
    dbname: ClassVar[Any] = ...
    dsn_parameters: ClassVar[Any] = ...
    error_message: ClassVar[Any] = ...
    host: ClassVar[Any] = ...
    needs_password: ClassVar[Any] = ...
    options: ClassVar[Any] = ...
    password: ClassVar[Any] = ...
    port: ClassVar[Any] = ...
    protocol_version: ClassVar[Any] = ...
    server_version: ClassVar[Any] = ...
    socket: ClassVar[Any] = ...
    ssl_attribute_names: ClassVar[Any] = ...
    ssl_in_use: ClassVar[Any] = ...
    status: ClassVar[Any] = ...
    transaction_status: ClassVar[Any] = ...
    used_password: ClassVar[Any] = ...
    user: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def parameter_status(self, *args, **kwargs) -> Any: ...
    def ssl_attribute(self, *args, **kwargs) -> Any: ...

class DataError(psycopg2.DatabaseError): ...

class DatabaseError(psycopg2.Error): ...

class Decimal:
    adapted: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getquoted(self, *args, **kwargs) -> Any: ...
    def __conform__(self, *args, **kwargs) -> Any: ...

class Diagnostics:
    column_name: ClassVar[Any] = ...
    constraint_name: ClassVar[Any] = ...
    context: ClassVar[Any] = ...
    datatype_name: ClassVar[Any] = ...
    internal_position: ClassVar[Any] = ...
    internal_query: ClassVar[Any] = ...
    message_detail: ClassVar[Any] = ...
    message_hint: ClassVar[Any] = ...
    message_primary: ClassVar[Any] = ...
    schema_name: ClassVar[Any] = ...
    severity: ClassVar[Any] = ...
    severity_nonlocalized: ClassVar[Any] = ...
    source_file: ClassVar[Any] = ...
    source_function: ClassVar[Any] = ...
    source_line: ClassVar[Any] = ...
    sqlstate: ClassVar[Any] = ...
    statement_position: ClassVar[Any] = ...
    table_name: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class Error(Exception):
    cursor: ClassVar[Any] = ...
    diag: ClassVar[Any] = ...
    pgcode: ClassVar[Any] = ...
    pgerror: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Float:
    adapted: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getquoted(self, *args, **kwargs) -> Any: ...
    def __conform__(self, *args, **kwargs) -> Any: ...

class ISQLQuote:
    _wrapped: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getbinary(self, *args, **kwargs) -> Any: ...
    def getbuffer(self, *args, **kwargs) -> Any: ...
    def getquoted(self, *args, **kwargs) -> Any: ...

class Int:
    adapted: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getquoted(self, *args, **kwargs) -> Any: ...
    def __conform__(self, *args, **kwargs) -> Any: ...

class IntegrityError(psycopg2.DatabaseError): ...

class InterfaceError(psycopg2.Error): ...

class InternalError(psycopg2.DatabaseError): ...

class List:
    adapted: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getquoted(self, *args, **kwargs) -> Any: ...
    def prepare(self, *args, **kwargs) -> Any: ...
    def __conform__(self, *args, **kwargs) -> Any: ...

class NotSupportedError(psycopg2.DatabaseError): ...

class Notify:
    channel: ClassVar[Any] = ...
    payload: ClassVar[Any] = ...
    pid: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class OperationalError(psycopg2.DatabaseError): ...

class ProgrammingError(psycopg2.DatabaseError): ...

class QueryCanceledError(psycopg2.OperationalError): ...

class QuotedString:
    adapted: ClassVar[Any] = ...
    buffer: ClassVar[Any] = ...
    encoding: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def getquoted(self, *args, **kwargs) -> Any: ...
    def prepare(self, *args, **kwargs) -> Any: ...
    def __conform__(self, *args, **kwargs) -> Any: ...

class ReplicationConnection(psycopg2.extensions.connection):
    autocommit: ClassVar[Any] = ...
    isolation_level: ClassVar[Any] = ...
    replication_type: ClassVar[Any] = ...
    reset: ClassVar[Any] = ...
    set_isolation_level: ClassVar[Any] = ...
    set_session: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class ReplicationCursor(psycopg2.extensions.cursor):
    feedback_timestamp: ClassVar[Any] = ...
    io_timestamp: ClassVar[Any] = ...
    wal_end: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def consume_stream(consumer, keepalive_interval = ...) -> Any: ...
    def read_message(self, *args, **kwargs) -> Any: ...
    def send_feedback(write_lsn = ..., flush_lsn = ..., apply_lsn = ..., reply = ..., force = ...) -> Any: ...
    def start_replication_expert(command, decode = ..., status_interval = ...) -> Any: ...

class ReplicationMessage:
    cursor: ClassVar[Any] = ...
    data_size: ClassVar[Any] = ...
    data_start: ClassVar[Any] = ...
    payload: ClassVar[Any] = ...
    send_time: ClassVar[Any] = ...
    wal_end: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class TransactionRollbackError(psycopg2.OperationalError): ...

class Warning(Exception): ...

class Xid:
    bqual: ClassVar[Any] = ...
    database: ClassVar[Any] = ...
    format_id: ClassVar[Any] = ...
    gtrid: ClassVar[Any] = ...
    owner: ClassVar[Any] = ...
    prepared: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def from_string(self, *args, **kwargs) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __len__(self) -> Any: ...

class connection:
    DataError: ClassVar[Any] = ...
    DatabaseError: ClassVar[Any] = ...
    Error: ClassVar[Any] = ...
    IntegrityError: ClassVar[Any] = ...
    InterfaceError: ClassVar[Any] = ...
    InternalError: ClassVar[Any] = ...
    NotSupportedError: ClassVar[Any] = ...
    OperationalError: ClassVar[Any] = ...
    ProgrammingError: ClassVar[Any] = ...
    Warning: ClassVar[Any] = ...
    async: ClassVar[Any] = ...
    async_: ClassVar[Any] = ...
    autocommit: ClassVar[Any] = ...
    binary_types: ClassVar[Any] = ...
    closed: ClassVar[Any] = ...
    cursor_factory: ClassVar[Any] = ...
    deferrable: ClassVar[Any] = ...
    dsn: ClassVar[Any] = ...
    encoding: ClassVar[Any] = ...
    info: ClassVar[Any] = ...
    isolation_level: ClassVar[Any] = ...
    notices: ClassVar[Any] = ...
    notifies: ClassVar[Any] = ...
    pgconn_ptr: ClassVar[Any] = ...
    protocol_version: ClassVar[Any] = ...
    readonly: ClassVar[Any] = ...
    server_version: ClassVar[Any] = ...
    status: ClassVar[Any] = ...
    string_types: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def cancel(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def commit(self, *args, **kwargs) -> Any: ...
    def cursor(self, name = ..., cursor_factory = ..., withhold = ...) -> Any: ...
    def fileno(self, *args, **kwargs) -> Any: ...
    def get_backend_pid(self, *args, **kwargs) -> Any: ...
    def get_dsn_parameters(self, *args, **kwargs) -> Any: ...
    def get_native_connection(self, *args, **kwargs) -> Any: ...
    def get_parameter_status(self, parameter) -> Any: ...
    def get_transaction_status(self) -> Any: ...
    def isexecuting(self, *args, **kwargs) -> Any: ...
    def lobject(self, oid = ..., mode = ..., new_oid = ..., new_file = ...,
lobject_factory = ...) -> Any: ...
    def poll(self, *args, **kwargs) -> Any: ...
    def reset(self) -> Any: ...
    def rollback(self) -> Any: ...
    def set_client_encoding(self, encoding) -> Any: ...
    def set_isolation_level(self, level) -> Any: ...
    def set_session(self, *args, **kwargs) -> Any: ...
    def tpc_begin(self, xid) -> Any: ...
    def tpc_commit(self, *args, **kwargs) -> Any: ...
    def tpc_prepare(self) -> Any: ...
    def tpc_recover(self) -> Any: ...
    def tpc_rollback(self, *args, **kwargs) -> Any: ...
    def xid(self, format_id, gtrid, bqual) -> Any: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, type, value, traceback) -> Any: ...

class cursor:
    arraysize: ClassVar[Any] = ...
    binary_types: ClassVar[Any] = ...
    closed: ClassVar[Any] = ...
    connection: ClassVar[Any] = ...
    description: ClassVar[Any] = ...
    itersize: ClassVar[Any] = ...
    lastrowid: ClassVar[Any] = ...
    name: ClassVar[Any] = ...
    pgresult_ptr: ClassVar[Any] = ...
    query: ClassVar[Any] = ...
    row_factory: ClassVar[Any] = ...
    rowcount: ClassVar[Any] = ...
    rownumber: ClassVar[Any] = ...
    scrollable: ClassVar[Any] = ...
    statusmessage: ClassVar[Any] = ...
    string_types: ClassVar[Any] = ...
    typecaster: ClassVar[Any] = ...
    tzinfo_factory: ClassVar[Any] = ...
    withhold: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def callproc(self, procname, parameters = ...) -> Any: ...
    def cast(self, oid, s): ...
    def close(self) -> Any: ...
    def copy_expert(self, sql, file, size = ...) -> Any: ...
    def copy_from(self, file, table, sep = ..., null = ..., size = ..., columns = ...) -> Any: ...
    def copy_to(self, file, table, sep = ..., null = ..., columns = ...) -> Any: ...
    def execute(self, query, vars = ...) -> Any: ...
    def executemany(self, query, vars_list) -> Any: ...
    def fetchall(self): ...
    def fetchmany(self, size = ...): ...
    def fetchone(self): ...
    def mogrify(self, *args, **kwargs) -> Any: ...
    def nextset(self) -> Any: ...
    def scroll(self, value, mode = ...) -> Any: ...
    def setinputsizes(self, sizes) -> Any: ...
    def setoutputsize(self, size, column = ...) -> Any: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, type, value, traceback) -> Any: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...

class lobject:
    closed: ClassVar[Any] = ...
    mode: ClassVar[Any] = ...
    oid: ClassVar[Any] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self) -> Any: ...
    def export(self, filename) -> Any: ...
    def read(self, size = ...) -> Any: ...
    def seek(self, offset, whence = ...) -> Any: ...
    def tell(self) -> Any: ...
    def truncate(self, len = ...) -> Any: ...
    def unlink(self, ) -> Any: ...
    def write(self, str) -> Any: ...

def Date(year, month, day): ...
def DateFromPy(*args, **kwargs) -> Any: ...
def DateFromTicks(ticks): ...
def IntervalFromPy(*args, **kwargs) -> Any: ...
def Time(hour, minutes, seconds, tzinfo = ...): ...
def TimeFromPy(*args, **kwargs) -> Any: ...
def TimeFromTicks(ticks): ...
def Timestamp(year, month, day, hour, minutes, seconds, tzinfo = ...): ...
def TimestampFromPy(*args, **kwargs) -> Any: ...
def TimestampFromTicks(ticks): ...
def _connect(*args, **kwargs) -> Any: ...
def adapt(*args, **kwargs) -> Any: ...
def encrypt_password(*args, **kwargs) -> Any: ...
def get_wait_callback(*args, **kwargs) -> Any: ...
def libpq_version(*args, **kwargs) -> Any: ...
def new_array_type(oids, name, baseobj): ...
def new_type(oids, name, castobj): ...
def parse_dsn(*args, **kwargs) -> Any: ...
def quote_ident(*args, **kwargs) -> Any: ...
def register_type(*args, **kwargs) -> Any: ...
def set_wait_callback(_none) -> Any: ...
